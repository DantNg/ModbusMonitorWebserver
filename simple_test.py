"""
Simple RTU Connection Tester
Ki·ªÉm tra k·∫øt n·ªëi Modbus RTU c∆° b·∫£n kh√¥ng qua connection pool
"""

import time
import serial
from pymodbus.client import ModbusSerialClient
from pymodbus.exceptions import ModbusIOException, ConnectionException

def list_available_ports():
    """Li·ªát k√™ t·∫•t c·∫£ COM ports c√≥ s·∫µn"""
    import serial.tools.list_ports
    ports = list(serial.tools.list_ports.comports())
    print("=== Available COM Ports ===")
    if not ports:
        print("‚ùå No COM ports found!")
        return []
    
    for port in ports:
        print(f"‚úÖ {port.device} - {port.description}")
    return [port.device for port in ports]

def test_serial_port_basic(port, baudrate=9600):
    """Test c∆° b·∫£n COM port c√≥ m·ªü ƒë∆∞·ª£c kh√¥ng"""
    print(f"\n=== Testing Serial Port: {port} ===")
    try:
        ser = serial.Serial(
            port=port,
            baudrate=baudrate,
            bytesize=8,
            parity='N',
            stopbits=1,
            timeout=1.0
        )
        print(f"‚úÖ Port {port} opened successfully")
        ser.close()
        print(f"‚úÖ Port {port} closed successfully")
        return True
    except Exception as e:
        print(f"‚ùå Cannot open port {port}: {e}")
        return False

def test_modbus_rtu_connection(port, baudrate=9600, unit_id=1, timeout=1.0):
    """Test k·∫øt n·ªëi Modbus RTU c∆° b·∫£n"""
    print(f"\n=== Testing Modbus RTU Connection ===")
    print(f"Port: {port}")
    print(f"Baudrate: {baudrate}")
    print(f"Unit ID: {unit_id}")
    print(f"Timeout: {timeout}s")
    
    client = None
    try:
        # T·∫°o client
        client = ModbusSerialClient(
            port=port,
            baudrate=baudrate,
            bytesize=8,
            parity='N',
            stopbits=1,
            timeout=timeout
        )
        
        # K·∫øt n·ªëi
        print("üîå Connecting...")
        connected = client.connect()
        
        if not connected:
            print("‚ùå Failed to connect to Modbus RTU")
            return False
            
        print("‚úÖ Connected to Modbus RTU")
        
        # Test ƒë·ªçc m·ªôt s·ªë function codes ph·ªï bi·∫øn
        test_results = {}
        
        # Test FC03 - Read Holding Registers
        print("\n--- Testing FC03 (Read Holding Registers) ---")
        for addr in [0, 1, 40001, 40002]:  # Test m·ªôt s·ªë ƒë·ªãa ch·ªâ ph·ªï bi·∫øn
            try:
                start_time = time.time()
                
                # Normalize address
                read_addr = addr
                if addr >= 40001:
                    read_addr = addr - 40001
                
                result = client.read_holding_registers(read_addr, 1, slave=unit_id)
                latency = (time.time() - start_time) * 1000
                
                if result.isError():
                    print(f"‚ùå Address {addr}: {result}")
                    test_results[f"FC03_addr_{addr}"] = f"Error: {result}"
                else:
                    value = result.registers[0]
                    print(f"‚úÖ Address {addr}: {value} (latency: {latency:.1f}ms)")
                    test_results[f"FC03_addr_{addr}"] = {"value": value, "latency_ms": latency}
                    
            except Exception as e:
                print(f"‚ùå Address {addr}: Exception: {e}")
                test_results[f"FC03_addr_{addr}"] = f"Exception: {e}"
        
        # Test FC01 - Read Coils
        print("\n--- Testing FC01 (Read Coils) ---")
        for addr in [0, 1, 10001, 10002]:
            try:
                start_time = time.time()
                
                read_addr = addr
                if addr >= 10001:
                    read_addr = addr - 10001
                    
                result = client.read_coils(read_addr, 1, slave=unit_id)
                latency = (time.time() - start_time) * 1000
                
                if result.isError():
                    print(f"‚ùå Coil {addr}: {result}")
                    test_results[f"FC01_addr_{addr}"] = f"Error: {result}"
                else:
                    value = result.bits[0]
                    print(f"‚úÖ Coil {addr}: {value} (latency: {latency:.1f}ms)")
                    test_results[f"FC01_addr_{addr}"] = {"value": value, "latency_ms": latency}
                    
            except Exception as e:
                print(f"‚ùå Coil {addr}: Exception: {e}")
                test_results[f"FC01_addr_{addr}"] = f"Exception: {e}"
        
        # Test FC04 - Read Input Registers
        print("\n--- Testing FC04 (Read Input Registers) ---")
        for addr in [0, 1]:
            try:
                start_time = time.time()
                result = client.read_input_registers(addr, 1, slave=unit_id)
                latency = (time.time() - start_time) * 1000
                
                if result.isError():
                    print(f"‚ùå Input Register {addr}: {result}")
                    test_results[f"FC04_addr_{addr}"] = f"Error: {result}"
                else:
                    value = result.registers[0]
                    print(f"‚úÖ Input Register {addr}: {value} (latency: {latency:.1f}ms)")
                    test_results[f"FC04_addr_{addr}"] = {"value": value, "latency_ms": latency}
                    
            except Exception as e:
                print(f"‚ùå Input Register {addr}: Exception: {e}")
                test_results[f"FC04_addr_{addr}"] = f"Exception: {e}"
        
        return test_results
        
    except Exception as e:
        print(f"‚ùå Modbus RTU test failed: {e}")
        return False
    finally:
        if client:
            try:
                client.close()
                print("üîå Connection closed")
            except:
                pass

def test_multiple_configurations(port):
    """Test v·ªõi nhi·ªÅu c·∫•u h√¨nh baudrate v√† unit ID kh√°c nhau"""
    print(f"\n=== Testing Multiple Configurations for {port} ===")
    
    # C√°c c·∫•u h√¨nh ph·ªï bi·∫øn
    configs = [
        {"baudrate": 9600, "unit_id": 1},
        {"baudrate": 19200, "unit_id": 1},
        {"baudrate": 38400, "unit_id": 1},
        {"baudrate": 9600, "unit_id": 2},
        {"baudrate": 9600, "unit_id": 3},
    ]
    
    successful_configs = []
    
    for config in configs:
        print(f"\n--- Testing: Baudrate={config['baudrate']}, Unit ID={config['unit_id']} ---")
        
        # Test v·ªõi timeout ng·∫Øn ƒë·ªÉ nhanh
        result = test_modbus_rtu_connection(
            port=port,
            baudrate=config['baudrate'],
            unit_id=config['unit_id'],
            timeout=0.5
        )
        
        if result and result != False:
            successful_configs.append(config)
            print(f"‚úÖ Configuration successful: {config}")
        else:
            print(f"‚ùå Configuration failed: {config}")
    
    return successful_configs

def save_test_results(results, filename="rtu_test_results.txt"):
    """L∆∞u k·∫øt qu·∫£ test ra file"""
    try:
        with open(filename, 'w') as f:
            f.write("=== RTU Test Results ===\n")
            f.write(f"Test time: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for key, value in results.items():
                f.write(f"{key}: {value}\n")
        
        print(f"‚úÖ Test results saved to {filename}")
    except Exception as e:
        print(f"‚ùå Failed to save results: {e}")

def interactive_test():
    """Test t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng"""
    print("=== Interactive RTU Tester ===")
    
    # Li·ªát k√™ ports
    available_ports = list_available_ports()
    if not available_ports:
        print("‚ùå No COM ports available for testing")
        return
    
    # Ch·ªçn port
    print(f"\nAvailable ports: {', '.join(available_ports)}")
    while True:
        port = input(f"Enter COM port to test (e.g. COM3): ").strip().upper()
        if port in available_ports or port.startswith('COM'):
            break
        print(f"‚ùå Invalid port. Please choose from: {', '.join(available_ports)}")
    
    # Test c∆° b·∫£n port
    if not test_serial_port_basic(port):
        print("‚ùå Basic serial port test failed. Check if port is not in use.")
        return
    
    # Test Modbus v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    print(f"\n=== Quick Test with Default Settings ===")
    result = test_modbus_rtu_connection(port, baudrate=9600, unit_id=1, timeout=1.0)
    
    if result and result != False:
        print("\n‚úÖ Quick test successful!")
        
        # H·ªèi c√≥ mu·ªën test th√™m kh√¥ng
        test_more = input("\nDo you want to test multiple configurations? (y/n): ").strip().lower()
        if test_more == 'y':
            successful_configs = test_multiple_configurations(port)
            if successful_configs:
                print(f"\n‚úÖ Found {len(successful_configs)} working configurations:")
                for config in successful_configs:
                    print(f"  - Baudrate: {config['baudrate']}, Unit ID: {config['unit_id']}")
            else:
                print("\n‚ùå No working configurations found")
    else:
        print("\n‚ùå Quick test failed. Trying multiple configurations...")
        successful_configs = test_multiple_configurations(port)
        
        if successful_configs:
            print(f"\n‚úÖ Found {len(successful_configs)} working configurations:")
            for config in successful_configs:
                print(f"  - Baudrate: {config['baudrate']}, Unit ID: {config['unit_id']}")
        else:
            print("\n‚ùå No working configurations found")
            print("\nüí° Troubleshooting tips:")
            print("   1. Check if the device is powered on")
            print("   2. Check cable connections")
            print("   3. Verify COM port settings match device settings")
            print("   4. Try different baudrates: 9600, 19200, 38400")
            print("   5. Try different unit IDs: 1, 2, 3")
            print("   6. Check if another program is using the COM port")

if __name__ == "__main__":
    try:
        interactive_test()
    except KeyboardInterrupt:
        print("\n\n‚ùå Test interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
    
    input("\nPress Enter to exit...")